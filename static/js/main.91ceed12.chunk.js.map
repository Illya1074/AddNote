{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","Count","setCount","inputValue","setInputValue","listItems","setlistItems","All","Active","Completed","activeButton","state","updateArray","category","arr","key","push","value","id","map","item","i","className","toString","type","checked","active","onChange","checkFluency","onClick","deleteItem","updateActive","console","log","ItemsLeft","count","countItem","props","itemsAllAmount","amountAll","itemsCompletedAmount","amountCompleted","class","selectAll","onKeyPress","event","clickHandler","placeholder","target","ItemsLeftPure","clickAll","clickActive","clickCompleted","clickClear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91ceed12.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import logo from './logo.svg';\nimport './App.css';\n// import './fontawesome.js';\n// import {useSelector, useDispatch} from 'react-redux';\n// import {increment, decrement, signin} from './actions';\n\n\n\nfunction App() {\n  const [Count, setCount] = useState(0);\n  const [inputValue, setInputValue] = useState('');\n  const [listItems, setlistItems] = useState();\n  const [itemsLeft, setItemsLeft] = useState(0);\n  const [checkbox, setCheckbox] = useState(false);\n  const [activeButton, setactiveButton] = useState({\n    All: '',\n    Active: '',\n    Completed: ''\n  }); \n  const [state, setState] = useState({\n    All: {},\n    Active: {}, \n    Completed: {}\n  });\n  // const numbers = [1,2,3,4];\n  // const listItems = numbers.map((number) => <h4>{number}</h4>);\n  \n  \n  const updateArray = (category, state) => {\n    const arr = []; \n    for(let key in state[category]){\n\n      arr.push({ \n        value: state[category][key].value,\n        id: key\n      });\n\n    }\n    // console.log(category)\n    setlistItems(arr.map((item,i) => \n        <div className=\"panel\" key = { i.toString() }>\n          <label className=\"container\">\n            <input  className=\"toggle\" type=\"checkbox\" checked={!state[category][item.id].active} onChange={() => checkFluency(item.id, category, state, item.value)} />\n            <span className=\"checkmark\"></span>\n\n          </label>        \n          <label className={state[category][item.id].active ? \"items\" : \"items_active\"}> { item.value } </label>\n          <span className=\"times\" onClick={() => deleteItem(state, item.id)}> Ã—</span>\n        </div>\n\n    ));\n  }\n\n\n  const updateActive = () => {\n    console.log(activeButton)\n    switch('active'){\n\n      case activeButton.All:\n        updateArray(\"All\",state);\n        break;\n      case activeButton.Active:\n        updateArray(\"Active\",state);\n        break;\n      case activeButton.Completed:\n        updateArray(\"Completed\",state);\n        break;\n      default:\n        updateArray(\"All\",state);\n    }\n\n  }\n\n  const deleteItem = (state, id) => {\n    delete state.All[id];\n    delete state.Active[id];\n    delete state.Completed[id]; \n\n    updateActive();\n  }\n\n\n  \n  const checkFluency = (item, category, state, value) => {\n    state.All[item].active = (!state.All[item].active);\n    if(state.All[item].active == false){\n      state.Completed[item] = {};\n      state.Completed[item].value = value;\n      state.Completed[item].active = false\n      delete state.Active[item];\n    } else {\n      state.Active[item] = {};\n      state.Active[item].value = value;\n      state.Active[item].active = true\n      delete state.Completed[item];\n    }\n    updateArray(category,state);\n  }\n  \n\n  const clickHandler = (state,inputValue, Count, activeButton) => {\n    {/*console.log(state);*/}\n    state.All[Count] = {} ;\n    state.All[Count].value = inputValue\n    state.All[Count].active = true;\n    state.Active[Count] = {} ;\n    state.Active[Count].value = inputValue\n    state.Active[Count].active = true;\n    setCount(Count + 1);\n    setInputValue('');\n    // setCount(Count + 1);\n    \n    updateActive();\n\n  }\n\n  \n\n  const handleChange = (event) => {\n    \n    setInputValue(event.target.value);\n  }  \n\n  const clickAll = (state) => {\n    \n    activeButton.All = 'active';\n    activeButton.Active = '';\n    activeButton.Completed = '';\n\n    updateArray(\"All\", state);\n\n  } \n  \n  const clickActive = (state) => {\n    activeButton.All = '';\n    activeButton.Active = 'active';\n    activeButton.Completed = '';\n\n    updateArray(\"Active\", state);\n  }  \n\n  const clickCompleted = (state) => {\n    activeButton.All = '';\n    activeButton.Active = '';\n    activeButton.Completed = 'active';\n    \n    updateArray(\"Completed\", state);\n  }\n\n  const clickClear = (state, activeButton) => {\n    for(let key in state.All){\n      if(state.All[key].active == false){\n         delete state.All[key];\n      }\n    }\n    delete state.Completed;\n\n    state.Completed = {}; \n\n    updateActive();\n  }\n  \n  const ItemsLeft = (state) => {    \n    const count = {countItem: 0};\n    for(let key in state.props.Active){\n      count.countItem = count.countItem + 1;\n    }\n    return (count.countItem);\n  }\n\n  const ItemsLeftPure = (state) => {    \n    const count = {countItem: 0};\n    for(let key in state.All){\n      count.countItem = count.countItem + 1;\n    }\n    return (count.countItem);\n  }\n\n\n  const keyPressed = (event) => {\n    if (event.key === \"Enter\") {\n      clickHandler(state, inputValue, Count, activeButton);\n    }\n  }\n\n\n  \n  const itemsAllAmount = (state) => {\n    const amountAll = {value: 0};\n    \n    for(let key in state.All){\n      amountAll.value = amountAll.value + 1;\n    }\n\n    return amountAll.value\n  }\n\n  const itemsCompletedAmount = (state) => {\n    const amountCompleted = {value: 0};\n    \n    for(let key in state.Completed){\n      amountCompleted.value = amountCompleted.value + 1;\n    }\n\n    return amountCompleted.value\n  }  \n\n\n  const selectAll = (state, activeButton) => {    \n    if(itemsCompletedAmount(state) == itemsAllAmount(state)){\n      for(let key in state.All){\n        // console.log(2)\n        state.All[key].active = false;\n        checkFluency(key, 'All', state, state.All[key].value)\n      } \n    } else {\n      for(let key in state.All){\n       // console.log(state.All[key].active)\n        state.All[key].active = true;\n        checkFluency(key, 'All', state, state.All[key].value)\n      }\n    }\n\n    updateActive();\n  }\n\n  \n\n\n  return (\n    <div className=\"App\">\n\n        <header>\n            <h1 className=\"title\">{/*<FontAwesomeIcon icon={faCheck} />*/} AddNote</h1>\n        </header>\n        \n        <div className=\"shadow\">\n          <main className=\"main\">\n            <div class=\"myflexInput\">\n              <div className={itemsCompletedAmount(state) == itemsAllAmount(state) && itemsAllAmount(state) != 0 ? 'arrow_active' : 'arrow' } onClick={() => selectAll(state, activeButton)} />\n              <input type=\"text\" onKeyPress={keyPressed} className=\"input\" placeholder=\"What needs to be done?\" value={inputValue} onChange={handleChange} />\n            </div>\n            <div>{listItems}</div>\n          </main>\n          \n          {ItemsLeftPure(state) ? \n\n            <footer className=\"myFooter\">\n              \n              <div className=\"Row\">\n                <button className={activeButton.All} onClick={() => clickAll(state)}>All</button>\n                <button className={activeButton.Active} onClick={() => clickActive(state)}>Active</button>\n                <button className={activeButton.Completed} onClick={() => clickCompleted(state)}>Completed</button>\n                <button className=\"clear\" onClick={() => clickClear(state, activeButton)}>Clear completed</button>\n                <span>items left <ItemsLeft props={state}></ItemsLeft></span>\n              </div>\n\n              {/*<div className=\"footerEndBig\" />\n              <div className=\"footerEndLittle\"/>\n            */}\n            </footer> : ''}\n                 \n        </div>\n\n\n\n      </div>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// const increment = () => {\n// \treturn {\n// \t\ttype: 'INCREMENT'\n// \t}\n// }\n\n// const decrement = () => {\n// \treturn {\n// \t\ttype: 'DECREMENT'\n// \t}\n// }\n\n\n// const counter = (state = 0, action) => {\n// \tswitch(action.type){\n// \t\tcase 'INCREMENT': \n// \t\t\treturn state + 1;\n// \t\tcase 'DECREMENT':\n// \t\t\treturn state - 1;\n// \t}\n// }\n\n// let store = createStore(counter);\n\n\n// store.subscribe(() => console.log(store.getState()));\n\n\n\n// store.dispatch(increment());\n// store.dispatch(decrement());\n// store.dispatch(decrement());\n\n\n\n"],"sourceRoot":""}